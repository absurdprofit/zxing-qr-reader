{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","state","file","undefined","qr_reader","context","document","getElementById","getContext","QrReader","on","result","window","confirm","text","_window","open","focus","this","setState","scan","stop","height","screen","width","className","style","justifyContent","id","onClick","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"0RAyDeA,E,4MAnDbC,MAAQ,CACNC,UAAMC,EACNC,eAAWD,G,kEAIQ,IAAD,OAEZE,EAD6BC,SAASC,eAAe,iBACFC,WAAW,MAEpE,GAAIH,EAAS,CACX,IAAMD,EAAY,IAAIK,IAASJ,GAC/BD,EAAUM,GAAG,SAAS,SAACC,GACrB,GAAIC,OAAOC,QAAP,wCAAgDF,EAAOG,KAAvD,MAAiE,CACnE,IAAMC,EAAWH,OAAOI,KAAKL,EAAOG,KAAM,UACnC,OAAPC,QAAO,IAAPA,KAASE,YAGbC,KAAKC,SAAL,2BAAkBD,KAAKjB,OAAvB,IAA8BG,UAAWA,KAAY,WAC/C,EAAKH,MAAMG,WACbA,EAAUgB,a,6CAQaF,KAAKjB,MAAMG,UAC9BiB,S,+BAGF,IAAD,OACDC,EAAkBV,OAAOW,OAAOD,OAAS,KAAOV,OAAOW,OAAOD,OAASV,OAAOW,OAAOC,MAAQ,IAAM,IACzG,OACE,qBAAKC,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAaC,MAAO,CAACC,eAAgB,cAAvD,UACE,qBAAKC,GAAG,mBAAR,SACE,wBAAQJ,MAAO,IAAKF,OAAQA,EAAQM,GAAG,oBAEzC,wBAAQA,GAAG,OAAOC,QAAS,WACI,EAAK5B,MAAMG,UAC9BiB,QAFZ,2B,GAzCQS,IAAMC,WCSTC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFrC,SAASC,eAAe,SAM1ByB,M","file":"static/js/main.b5522dd1.chunk.js","sourcesContent":["import React from 'react';\nimport './css/App.css';\nimport {QrReader} from 'zxing-qr-reader/reader';\nimport {IResult} from 'zxing-qr-reader/zxing';\n\nclass App extends React.Component {\n  state = {\n    file: undefined,\n    qr_reader: undefined\n  }\n\n\n  componentDidMount() {\n    const canvas : HTMLCanvasElement = document.getElementById('stream-buffer') as HTMLCanvasElement;\n    const context : CanvasRenderingContext2D | null = canvas.getContext('2d');\n\n    if (context) {\n      const qr_reader = new QrReader(context);\n      qr_reader.on('found', (result : IResult) => {\n        if (window.confirm(`Are you sure you want to open ${result.text}?`)) {\n          const _window  = window.open(result.text, \"_blank\");\n          _window?.focus();\n        }\n      })\n      this.setState({...this.state, qr_reader: qr_reader}, () => {\n        if (this.state.qr_reader) {\n          qr_reader.scan();\n        }\n      });\n      \n    }\n  }\n\n  componentWillUnmount() {\n    const qr_reader : QrReader = this.state.qr_reader as unknown as QrReader;\n    qr_reader.stop();\n  }\n\n  render() {\n    const height : number = window.screen.height < 500 && window.screen.height > window.screen.width ? 852 : 480;\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\" style={{justifyContent: 'flex-start'}}>\n          <div id=\"canvas-container\">\n            <canvas width={480} height={height} id=\"stream-buffer\" />\n          </div>\n          <button id=\"stop\" onClick={() => {\n            const qr_reader : QrReader = this.state.qr_reader as unknown as QrReader;\n            qr_reader.stop();\n          }}>Stop</button>\n          \n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}